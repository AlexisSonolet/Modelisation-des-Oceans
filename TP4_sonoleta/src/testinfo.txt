// Utilisé pour ctrl-c ctrl-v les tests pour pas pourrir le main, a mettre dans un véritable fichier test

// test de even/odd
	//Dvector test(7);
	//test.fillRandomly();
	//test.display(cout);
	//Dvector test_even = test.get_even();
	//test_even.display(cout);
	//Dvector test_odd = test.get_odd();
	//test_odd.display(cout);
    // Question 1 : Height
	cout << "Test FFT croissant/decroissant" << endl;
	ComplexVector<complex<double>> test_croiss_decroiss(8);
	for(int i = 0; i < 8; i++)
	{
		test_croiss_decroiss.set(i, complex<double>(i+1, 8-i));
	}
	printf("On applique la FFT\n");
	fft(test_croiss_decroiss);
	cout << test_croiss_decroiss << endl;
	cout << test_croiss_decroiss;
    cout << "Test FFT" << endl;
	// Using the tests at http://www.sccon.ca/sccon/fft/fft3.htm
	ComplexVector<complex<double>> test_vect(8);
//	for(int i = 0; i < 8; i++){
	test_vect.set(0, complex<double>(1.0,0.0));
//	}
	//test_vect.set(1, complex<double>(2.0,0.0));	
	test_vect.display(cout);
	printf("Taille : %d\n", test_vect.size());
	test_vect.fillRandomly();
	test_vect.display(cout);
	//ComplexVector<complex<double>> test_vect_even = test_vect.get_even();
	//printf("Even vector :\n");
	//test_vect_even.display(cout);
	//ComplexVector<complex<double>> test_vect_odd = test_vect.get_odd();
	//printf("Odd vector :\n");
	//test_vect_odd.display(cout);
	cout << "We apply FFT and obtain" << endl;
	fft(test_vect);
	test_vect.display(cout);
	cout << "Test FFT2" << endl;
	// Using the tests at http://www.sccon.ca/sccon/fft/fft3.htm
	ComplexVector<complex<double>> test_fft_2(8);
//	for(int i = 0; i < 8; i++){
	test_fft_2.set(1, complex<double>(1.0,0.0));
//	}	
	test_fft_2.display(cout);
	cout << "We apply FFT and obtain" << endl;
	fft(test_fft_2);
	test_fft_2.display(cout);

	cout << "Test ComplexVector" << endl;
	ComplexVector <complex<double>> test_vect_1(8);
	test_vect_1.display(cout);
	printf("Type:\n");
	cout << typeid(test_vect_1).name() << endl;
	printf("TestFill\n");
	ComplexVector <complex<double>> test_vect_init(5, complex<double>(1,2)); 
	test_vect_init.display(cout);
	printf("TestAssignRandom\n");
	ComplexVector <complex<double>> test_vect_2(10);
	test_vect_2.fillRandomly();
	test_vect_2.display(cout);
	printf("Size of testAssign vector : %d\n", test_vect_2.size());
	printf("Test Recopie\n");
	ComplexVector <complex<double>> test_vect_copie(test_vect_2);
	printf("J'affiche la copie :\n");
	test_vect_copie.display(cout);
	printf("Check ==\n");
	printf(test_vect_copie == test_vect_2 ? "true\n" : "false\n");
	printf("Je modifie la copie\n");
	test_vect_copie.set(1, complex<double>(2,3));
	printf("J'affiche la copie:\n");
	test_vect_copie.display(cout);
	printf("On vérifie que l'original n'a pas changé:\n");
	test_vect_2.display(cout);	
	printf("Test Complex from file\n");
	ComplexVector<complex<double>> test_vect_3("./../src/tp4_test1.txt");
	test_vect_3.display(cout);
	printf("Test Basic operations:\n");
	printf("file - fillRandomly :\n");
	test_vect_3 -= test_vect_2;
	test_vect_3.display(cout);
	printf(" * 5 :\n");
	test_vect_3 *= 5;
	test_vect_3.display(cout);
	printf(" *= fillRandomly :\n");
	test_vect_3 *= test_vect_2;
	test_vect_3.display(cout);
	printf("Test print << \n");
	cout << test_vect_3 << endl;
	//printf("Test >> \n");
	//ComplexVector <complex<double>> test_vect_4(1);
	//cin >> test_vect_4;
	//cout << test_vect_4 << endl;
